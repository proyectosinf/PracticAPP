plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.ksp)
    alias(libs.plugins.serialization)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.kover)
}

android {
    namespace 'com.mobivery.fct25.data'

    defaultConfig {
        compileSdk libs.versions.compileSdk.get() as Integer
        minSdk libs.versions.minSdk.get() as Integer
        targetSdk libs.versions.targetSdk.get() as Integer

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "VERSION_NAME", "\"1.0.0\"")
        buildConfigField("int", "VERSION_CODE", "1")
    }

    compileOptions {
        sourceCompatibility JavaVersion.toVersion(libs.versions.jvm.get())
        targetCompatibility JavaVersion.toVersion(libs.versions.jvm.get())
    }

    kotlinOptions {
        jvmTarget = libs.versions.jvm.get()
    }

    buildFeatures {
        buildConfig = true
    }

    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.pro'
            buildConfigField "boolean", "DEBUG", "false"
        }
        debug {
            buildConfigField "boolean", "DEBUG", "true"
        }
    }

    flavorDimensions = ["product", "environment"]
    productFlavors {
        apply from: '../app/build_variants.gradle', to: ext
        ext.flavors.each { name, config ->
            "$name" {
                dimension config.dimension

                if (config.amplitudeKey != null) {
                    buildConfigField "String", "AMPLITUDE_KEY", "\"${config.amplitudeKey}\""
                }

                if (config.apiUrl != null) {
                    buildConfigField "String", "API_URL", "\"${config.apiUrl}\""
                }

                if (config.debug != null) {
                    buildConfigField "boolean", "DEBUG", "${config.debug}"
                }
            }
        }
    }

    packagingOptions {
        resources.excludes.add("META-INF/*")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            test {
                reports.junitXml.outputLocation.set(file("$rootDir/build/test-results/data"))
            }
        }
    }
}

dependencies {
    implementation project(path: ":domain")

    implementation libs.kotlin.stdlib

    implementation libs.androidx.ktx.core
    implementation libs.androidx.security
    implementation libs.androidx.dataStore

    // Firebase
    implementation platform(libs.firebase.bom)
    implementation libs.firebase.auth.ktx
    implementation libs.firebase.config
    implementation libs.kotlinx.coroutines.play.services
    implementation(libs.firebase.crashlytics) {
        exclude group: 'com.google.android.gms', module: 'play-services-ads-identifier'
    }

    // Dagger/Hilt
    implementation libs.hilt.core
    ksp libs.hilt.compiler

    // Retrofit and networking
    implementation libs.io.retrofit.core
    implementation libs.io.retrofit.gson
    implementation(platform(libs.io.okhttp.bom))
    implementation libs.io.okhttp.core
    implementation libs.io.okhttp.log
    implementation libs.okhttp
    implementation libs.logging.interceptor
    implementation libs.retrofit2.kotlinx.serialization.converter
    implementation libs.io.serializationJson

    // Serialization
    implementation libs.io.serializationJson

    // Test
    testImplementation project(path: ':testing')
    testImplementation libs.test.coroutines
    testImplementation libs.bundles.test
    testImplementation libs.test.mockk.core
    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation(libs.play.services.tasks)
}
