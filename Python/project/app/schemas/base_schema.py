from enum import Enum
from typing import Any, Optional, Type

from fastapi import HTTPException
from pydantic import BaseModel, ConfigDict
from tortoise.contrib.pydantic import pydantic_model_creator

from app.modules.database_module.models.database_model import DatabaseModel


class BaseSchema(BaseModel):
    """
    Standard schema class
    """

    @staticmethod
    def model_creator(
        model: Type[DatabaseModel], exclude_readonly: bool = True
    ) -> Type[BaseModel]:
        """
        Creates a schema from the passed model and returns it
        :param exclude_readonly: Autogenerated parameters are included
        :param model: template to create the schema
        :return: a schema created from the model
        :rtype: Type[BaseModel]
        """
        return pydantic_model_creator(
            model,
            model_config=ConfigDict(extra="ignore"),
            exclude_readonly=exclude_readonly,
        )


class BaseOutputSchema(BaseModel):
    """
    Standard application output model class
    """

    def dict(self, *args, **kwargs):
        if kwargs and kwargs.get("exclude_none") is not None:
            kwargs["exclude_none"] = True
        return BaseModel.model_dump(self, *args, **kwargs)


class BaseErrorOutputSchema(BaseOutputSchema):
    """
    Standard application error output model class
    """

    code: int = 500
    error: Optional[Any | None] = None


class BaseExceptionInfo(Enum):
    """
    Standard application exception information
    """

    def __init__(self, error_code: int, detail: str, http_code: int = 400):
        self.error_code = error_code
        self.error_message = detail
        self.http_code = http_code

    def __str__(self):
        return f"{self.http_code}: code={self.error_code} error='{self.error_message}'"


class BaseException(HTTPException):
    """
    Base class for custom exceptions in the application
    """

    def __init__(self, exception_info: BaseExceptionInfo):
        detail = {
            "code": exception_info.error_code,
            "error": exception_info.error_message,
        }
        super().__init__(
            status_code=exception_info.http_code,
            detail=detail,
        )
